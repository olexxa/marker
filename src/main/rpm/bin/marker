#!/bin/bash
#chkconfig: 345 95 05
#description: marker service

### Variables

## Auto generated variables

HOME=/opt/softedge/marker
VERSION=1.0.0-alpha
NAME=marker
USER=marker
GROUP=marker
JMX_PORT=9999
DEBUG_PORT=5555

## Command

if [ -z $JAVA_HOME ]
then
    JAVA_HOME=/opt/java/latest
fi
JAVA="$JAVA_HOME/bin/java"

LOGS=$HOME/logs
JAR=$HOME/jars/$NAME.jar

## Options

HOST=`hostname`
HOST_OPTS="-Dhostname=$HOST"

HOME_OPTS="-Dhome=$HOME"

MEM_OPTS=""
# MEM_OPTS="-Xmx4096M -Xms1024M"

D64_OPTS=`uname -i | grep 64 | sed -e "s/^.*64.*$/-d64/"`

JMX_OPTS="-Dcom.sun.management.jmxremote.port=$JMX_PORT"
JMX_OPTS="-Dcom.sun.management.jmxremote.authenticate=false $JMX_OPTS"
JMX_OPTS="-Dcom.sun.management.jmxremote.ssl=false $JMX_OPTS"

JVM_OPTS="-server -Dfile.encoding=UTF-8"
JVM_OPTS="-XX:MaxPermSize=256m -XX:+HeapDumpOnOutOfMemoryError $JVM_OPTS"

LIB_OPTS="-Djava.library.home=$HOME/lib:/usr/lib"

LIBS=`find $HOME/jars -type f -name "*.jar"`
LIBS=`echo $LIBS | sed "s/ /:/g"`

DEBUG_OPTS="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=$DEBUG_PORT"

OPTS="$D64_OPTS $MEM_OPTS $JMX_OPTS $JVM_OPTS $HOME_OPTS $HOST_OPTS $DEBUG_OPTS $LIB_OPTS"

MAIN="com.softedge.marker.Marker"

RUN_CMD="$JAVA $OPTS -cp $HOME/war/:$HOME/conf/:$LIBS $MAIN >$LOGS/$NAME.log 2>$LOGS/$NAME.log"

TIMEOUT=60
PID_FILE="/var/run/$NAME.pid"


### Service Functions

# Makes the file $1 writable by the group $GROUP
function makeFileWritable {
   local filename="$1"
   touch $filename || return 1
   chown $USER:$GROUP $filename || return 1
   chmod ug+w $filename || return 1
   return 0;
}

# Returns 0 if the process with PID $1 is running.
function checkProcessIsRunning {
   local pid="$1"
   if [ -z "$pid" -o "$pid" == " " ]; then return 1; fi
   if [ ! -e /proc/$pid ]; then return 1; fi
   return 0;
}

# Returns 0 if the process with PID $1 is target process.
function checkProcessIsOurService {
   local pid="$1"
   ## this doesn't work: ps gives out 'java', which != '$JAVA_HOME/bin/java'
   ## if [ "$(ps -p $pid --no-headers -o comm)" != "$JAVA" ]; then return 1; fi
   [[ "$(cat /proc/$pid/cmdline)" != $JAVA* ]] && return 1;
   grep -q --binary -F "$MAIN" /proc/$pid/cmdline
   if [ $? -ne 0 ]; then return 1; fi
   return 0;
}

# Returns 0 when the service is running and sets the variable $pid to the PID.
function getServicePID {
   if [ ! -f $PID_FILE ]; then return 1; fi
   pid="$(<$PID_FILE)"
   checkProcessIsRunning $pid || return 1
   checkProcessIsOurService $pid || return 1
   return 0;
}

function startServiceProcess {
   cd $HOME || return 1
   rm -f $PID_FILE
   makeFileWritable $PID_FILE || return 1
   cmd="nohup $RUN_CMD & echo \$! >$PID_FILE"
   su -m $USER -s $SHELL -c "$cmd" || return 1
   sleep 0.1
   pid="$(<$PID_FILE)"
   if checkProcessIsRunning $pid; then :; else
      echo -ne "\n$NAME start failed"
      return 1
   fi
   return 0;
}

function stopServiceProcess {
   kill $pid || return 1
   for ((i=0; i<TIMEOUT*10; i++)); do
      checkProcessIsRunning $pid
      if [ $? -ne 0 ]; then
         rm -f $PID_FILE
         return 0
         fi
      sleep 0.1
      done
   echo -e "\n$NAME did not terminate within $TIMEOUT seconds, sending SIGKILL..."
   kill -s KILL $pid || return 1
   local killWaitTime=15
   for ((i=0; i<killWaitTime*10; i++)); do
      checkProcessIsRunning $pid
      if [ $? -ne 0 ]; then
         rm -f $PID_FILE
         return 0
         fi
      sleep 0.1
      done
   echo "Error: $NAME could not be stopped within $TIMEOUT+$killWaitTime seconds!"
   return 1;
}

function startService {
   getServicePID
   if [ $? -eq 0 ]; then echo -n "$NAME is already running"; RETVAL=0; return 0; fi
   echo -n "Starting $NAME   "
   startServiceProcess
   if [ $? -ne 0 ]; then RETVAL=1; echo " failed"; return 1; fi
   echo "started PID=$pid"
   RETVAL=0
   return 0;
}

function stopService {
   getServicePID
   if [ $? -ne 0 ]; then echo -n "$NAME is not running"; RETVAL=0; echo ""; return 0; fi
   echo -n "Stopping $Name   "
   stopServiceProcess
   if [ $? -ne 0 ]; then RETVAL=1; echo " failed"; return 1; fi
   echo "stopped PID=$pid"
   RETVAL=0
   return 0;
}

function checkService {
   echo -n "Checking for $NAME:   "
   if getServicePID; then
    echo "running PID=$pid"
    RETVAL=0
   else
    echo "stopped"
    RETVAL=3
   fi
   return 0;
}

function main {
   RETVAL=0
   case "$1" in
      start)
         startService
         ;;
      stop)
         stopService
         ;;
      restart)
         stopService && startService
         ;;
      status)
         checkService
         ;;
      *)
         echo "Usage: $0 {start|stop|restart|status}"
         exit 1
         ;;
      esac
   exit $RETVAL
}

main $1
